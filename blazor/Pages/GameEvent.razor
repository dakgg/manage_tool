@page "/gameEvent"
@using Heron.MudCalendar
@using Microsoft.EntityFrameworkCore
@using dakg
@inject CommonContext DbContext
@inject ISnackbar Snackbar

<h3>게임 이벤트 일정</h3>

<MudStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center"
    Style="width: 650px; height: 450px; display: flex; margin: auto;">
    <MudDateRangePicker PickerVariant="PickerVariant.Static" @bind-DateRange="@_dateRange" Margin="Margin.Dense" />
    <MudTextField Label="Enter Event Name" @bind-Value="@_eventName" />
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default"
        OnClick="AddEventAsync">
        Add
    </MudButton>
</MudStack>

<MudCalendar Class="mb-4 mt-4" Items="_events" MonthCellMinHeight="115" ShowDay="false" ShowWeek="false">
    <CellTemplate>
        <div style="width: 100%; height: 100%; border: 2px solid @GetColor(((DakgGameEventItem)context).Color)">
            <div style="background-color: @GetColor(((DakgGameEventItem)context).Color)">
                <MudText Style="color: #ffffff;" Typo="Typo.body1" Align="Align.Center">
                    @(((DakgGameEventItem)context).Text)
                </MudText>
            </div>
        </div>
    </CellTemplate>
</MudCalendar>

<MudTable T="DakgGameEventItem" Items="@_events" Hover="true" MultiSelection="true" Breakpoint="Breakpoint.Sm"
    SelectedItems="@_selectedItems" SelectedItemsChanged="OnSelectedItemsChanged" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>PK</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>End</MudTh>
        <MudTh>Name</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PK">@context.PK</MudTd>
        <MudTd DataLabel="Start">@context.Start</MudTd>
        <MudTd DataLabel="End">@context.End</MudTd>
        <MudTd DataLabel="Name">@context.Text</MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTd colspan="5">Select All</MudTd>
    </FooterContent>
</MudTable>

<MudGrid Justify="Justify.Center">
    <MudItem>
        <MudButton Class="m-4 p-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete"
            Disabled="_isDisable" Color="Color.Secondary" OnClick="DeleteSelectedEventAsync">
            Delete
        </MudButton>
    </MudItem>
</MudGrid>

@code {
    class DakgGameEventItem : CalendarItem
    {
        public int PK { get; set; }
        public Color Color { get; set; } = Color.Primary;
    }

    string _eventName { get; set; } = "";

    List<dakg.GameEvent> _gameEvents { get; set; } = new List<dakg.GameEvent>();
    List<DakgGameEventItem> _events = new();
    HashSet<DakgGameEventItem> _selectedItems = new();
    List<int> _selectedPks = new();
    bool _isDisable = true;
    DateRange _dateRange;

    async void AddEventAsync()
    {
        if (string.IsNullOrWhiteSpace(_eventName)) return;

        var gameEvent = new dakg.GameEvent()
            {
                StartTime = _dateRange.Start.Value,
                EndTime = _dateRange.End.Value,
                Name = _eventName,
            };

        await DbContext.Events.AddAsync(gameEvent);
        await DbContext.SaveChangesAsync();

        _dateRange = new();
        _eventName = string.Empty;
        _events.Add(ConvertToCalendarItem(gameEvent));
    }

    protected override async Task OnInitializedAsync()
    {
        await InitGameEventDataAsync();
    }

    async Task InitGameEventDataAsync()
    {
        _gameEvents = await DbContext.Events.ToListAsync();
        _events = _gameEvents.Select(ge => ConvertToCalendarItem(ge)).ToList();
    }

    DakgGameEventItem ConvertToCalendarItem(dakg.GameEvent ge)
    {
        var evi = new DakgGameEventItem()
            {
                Start = ge.StartTime,
                End = ge.EndTime,
                Text = ge.Name,
                PK = ge.Id
            };

        // set random color
        var max = Enum.GetValues<MudBlazor.Color>().Length;
        evi.Color = (MudBlazor.Color)(evi.PK % max);

        return evi;
    }

    string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";

    async Task DeleteSelectedEventAsync()
    {
        foreach (var item in _selectedItems)
        {
            var ge = DbContext.Events.Single(evt => evt.Id == item.PK);
            DbContext.Events.Remove(ge);
        }

        await DbContext.SaveChangesAsync();
        await InitGameEventDataAsync();
    }

    void OnSelectedItemsChanged(HashSet<DakgGameEventItem> args)
    {
        _isDisable = !_selectedItems.Any();
    }
}